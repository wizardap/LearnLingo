Index: src/main/java/com/application/learnlingo/Controller/FunnyQuizGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.application.learnlingo.Controller;\r\n\r\nimport com.application.learnlingo.Model.DatabaseManager;\r\nimport com.application.learnlingo.Model.Game;\r\nimport com.application.learnlingo.Model.Quiz;\r\nimport com.jfoenix.controls.JFXButton;\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.effect.DropShadow;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.media.AudioClip;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.util.Duration;\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.net.URL;\r\nimport java.sql.Connection;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class FunnyQuizGame extends GameController implements Game {\r\n\r\n    private static final String DB_PATH =\r\n            \"./src/main/resources/com/application/learnlingo/database/quiz.db\";\r\n    private static final String DEFAULT_HIGH_SCORE_FILE_PATH =\r\n            \"./src/main/resources/com/application/learnlingo/database/FunnyQuizGameHighScore.txt\";\r\n    private static final String IMAGE_FUNNYQUIZGAME_PATH =\r\n            \"/com/application/learnlingo/imageFunnyQuiz/\";\r\n    private static final int TIME = 15;\r\n    private static final int DEFAULT_CORRECT_PENALTY = 10;\r\n    private static int score = 0;\r\n    private static int round = 1;\r\n    @FXML\r\n    public Label top1;\r\n    @FXML\r\n    public Label top2;\r\n    @FXML\r\n    public Label top3;\r\n    @FXML\r\n    public Label top4;\r\n    @FXML\r\n    public Button startButton;\r\n    @FXML\r\n    private Button changeDictionaryButton;\r\n    @FXML\r\n    private Button answerA;\r\n    @FXML\r\n    private Button answerB;\r\n    @FXML\r\n    private Button answerC;\r\n    @FXML\r\n    private Button answerD;\r\n    @FXML\r\n    private JFXButton back;\r\n    @FXML\r\n    private Button btnmusic;\r\n    @FXML\r\n    private Button btnvolume;\r\n    @FXML\r\n    private AnchorPane center;\r\n    @FXML\r\n    private Button changeModeButton;\r\n    @FXML\r\n    private BorderPane container;\r\n    @FXML\r\n    private VBox credit;\r\n    @FXML\r\n    private HBox function;\r\n    @FXML\r\n    private Button gameButton;\r\n    @FXML\r\n    private Button bookmarkButton;\r\n    @FXML\r\n    private VBox htp;\r\n    @FXML\r\n    private ImageView illustrations;\r\n    @FXML\r\n    private VBox left;\r\n    @FXML\r\n    private VBox menuGame;\r\n    @FXML\r\n    private ImageView music;\r\n    @FXML\r\n    private Label questionLabel;\r\n    @FXML\r\n    private Label roundLabel;\r\n    @FXML\r\n    private Label scoreLabel;\r\n    @FXML\r\n    private Button settingsButton;\r\n    @FXML\r\n    private Button start;\r\n    @FXML\r\n    private Label timerLabel;\r\n    @FXML\r\n    private HBox top;\r\n    @FXML\r\n    private VBox boxContainImage;\r\n    @FXML\r\n    private ImageView volume;\r\n    private Timeline timeline;\r\n    private List<Quiz> quizList;\r\n    private List<Button> answerList;\r\n    private boolean playing = false;\r\n\r\n    @FXML\r\n    private AnchorPane loseGame;\r\n\r\n    @FXML\r\n    private AnchorPane winGame;\r\n\r\n    @FXML\r\n    private Button yesWin;\r\n\r\n    @FXML\r\n    private Button noWin;\r\n\r\n    @FXML\r\n    private Button yesLose;\r\n\r\n    @FXML\r\n    private Button noLose;\r\n    @FXML\r\n    private Label highScoreLabel;\r\n\r\n    private int highScore = 0;\r\n\r\n    public static void reset() {\r\n        FileWriter fw = null;\r\n        try {\r\n            fw = new FileWriter(DEFAULT_HIGH_SCORE_FILE_PATH);\r\n        } catch (java.io.IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        assert fw != null;\r\n        java.io.BufferedWriter bw = new java.io.BufferedWriter(fw);\r\n        try {\r\n            bw.write(\"0\");\r\n        } catch (java.io.IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        try {\r\n            bw.close();\r\n            fw.close();\r\n        } catch (java.io.IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void loadDataFromDatabase() {\r\n        Connection connection = DatabaseManager.getConnection(DB_PATH);\r\n        String sql = \"SELECT * FROM Quiz\";\r\n        try {\r\n            java.sql.Statement stmt = connection.createStatement();\r\n            java.sql.ResultSet rs = stmt.executeQuery(sql);\r\n            while (rs.next()) {\r\n                String question = rs.getString(\"question\");\r\n                String answerA = rs.getString(\"A\");\r\n                String answerB = rs.getString(\"B\");\r\n                String answerC = rs.getString(\"C\");\r\n                String answerD = rs.getString(\"D\");\r\n                String correctAnswer = rs.getString(\"Key\");\r\n                String imagePath = IMAGE_FUNNYQUIZGAME_PATH + rs.getString(\"ImagePath\");\r\n                List<String> answer = new ArrayList<>();\r\n                answer.add(answerA);\r\n                answer.add(answerB);\r\n                answer.add(answerC);\r\n                answer.add(answerD);\r\n                String regex = \"\";\r\n                if (question.contains(\"-\")) {\r\n                    regex = \"(?=[-])\";\r\n\r\n                } else if (question.matches(\"[?:!]\") || question.contains(\":\")) {\r\n                    regex = \"(?<=[?:!])\";\r\n                }\r\n                if (!regex.isEmpty()) {\r\n                    String[] temp = question.split(regex);\r\n                    question = \"\";\r\n                    for (int i = 0; i < temp.length; i++) {\r\n                        question += temp[i] + \"\\n\";\r\n                    }\r\n                }\r\n                Quiz quiz = new Quiz(question, answer, correctAnswer, imagePath);\r\n                quizList.add(quiz);\r\n            }\r\n        } catch (java.sql.SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void init() {\r\n        timeline = new Timeline();\r\n        quizList = new ArrayList<>();\r\n        answerList = new ArrayList<>();\r\n        answerList.add(answerA);\r\n        answerList.add(answerB);\r\n        answerList.add(answerC);\r\n        answerList.add(answerD);\r\n        score = 0;\r\n        round = 1;\r\n        loadDataFromDatabase();\r\n        Collections.shuffle(quizList);\r\n        highScoreLabel.setText(String.valueOf(highScore));\r\n        yesLose.setOnMouseClicked(e1 -> {\r\n            loseGame.setVisible(false);\r\n            if (checkAudio) {\r\n                musicGame.play();\r\n            }\r\n            init();\r\n            startButton.getOnMouseClicked().handle(e1);\r\n        });\r\n\r\n        noLose.setOnMouseClicked(e1 -> {\r\n            AnimationChangeScene.handleButtonClick(VIEW_PATH + \"game.fxml\", container);\r\n        });\r\n        yesWin.setOnMouseClicked(e1 -> {\r\n            winGame.setVisible(false);\r\n            init();\r\n            startButton.getOnMouseClicked().handle(e1);\r\n        });\r\n\r\n        noWin.setOnMouseClicked(e1 -> {\r\n            AnimationChangeScene.handleButtonClick(VIEW_PATH + \"game.fxml\", container);\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    public void start() {\r\n        startButton.setOnMouseClicked(e -> {\r\n            checkStart = true;\r\n            if (checkVolume) {\r\n                if (!click.isPlaying()) {\r\n                    click.play();\r\n                }\r\n            }\r\n            if (checkAudio) {\r\n                if (!musicGame.isPlaying()) {\r\n                    musicGame.play();\r\n                }\r\n            }\r\n            playing = true;\r\n            startButton.setVisible(false);\r\n            answerList.forEach(button -> {\r\n                button.getStyleClass().removeIf(eg -> eg.equals(\"correctAnswer\"));\r\n                button.getStyleClass().removeIf(eg -> eg.equals(\"wrongAnswer\"));\r\n            });\r\n            if (startButton.getText().equals(\"NEXT\")) {\r\n                round++;\r\n            } else if (startButton.getText().equals(\"RESTART\")) {\r\n                round = 1;\r\n                score = 0;\r\n                Collections.shuffle(quizList);\r\n            }\r\n            roundLabel.setText(String.valueOf(round));\r\n            scoreLabel.setText(String.valueOf(score));\r\n            Quiz quiz = quizList.get(round - 1);\r\n            questionLabel.setText(quiz.getQuestion());\r\n            List<String> answer = quiz.getAnswer();\r\n            for (int i = 0; i < answer.size(); i++) {\r\n                answerList.get(i).setText(answer.get(i));\r\n            }\r\n            setImage(quiz.getImagePath());\r\n            timerLabel.setText(String.valueOf(TIME));\r\n            timeline = new Timeline();\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(1), event -> {\r\n                int time = Integer.parseInt(timerLabel.getText());\r\n                if (time > 0) {\r\n                    time--;\r\n                    timerLabel.setText(String.valueOf(time));\r\n                } else {\r\n                    timeline.stop();\r\n                    playing = false;\r\n                    loseGame.setVisible(true);\r\n                    AudioClip loseGame = new AudioClip(TextTwistGame.class.getResource(AUDIO_PATH + \"loseGame.mp3\").toString());\r\n                    if (checkVolume) {\r\n                        loseGame.play();\r\n                    }\r\n                    musicGame.stop();\r\n                    for (Button button : answerList) {\r\n                        String answerText = answerList.get(quiz.getCorrectAnswer().charAt(0) - 'A').getText();\r\n                        if (button.getText().equals(answerText)) {\r\n                            button.getStyleClass().add(\"correctAnswer\");\r\n                        } else {\r\n                            button.getStyleClass().add(\"wrongAnswer\");\r\n                            answerList.get(quiz.getCorrectAnswer().charAt(0) - 'A').getStyleClass().add(\"correctAnswer\");\r\n                            startButton.setText(\"RESTART\");\r\n                        }\r\n                    }\r\n                    AudioClip wrongAnswer = new AudioClip(getClass().getResource(AUDIO_PATH + \"wrongAnswer.mp3\").toString());\r\n                    if (checkVolume) {\r\n                        wrongAnswer.play();\r\n                    }\r\n                    notice(false);\r\n\r\n                }\r\n            }));\r\n            timeline.play();\r\n            answerList.forEach(button -> {\r\n                button.setOnAction(event -> {\r\n                    if (playing) {\r\n                        if (checkVolume) {\r\n                            click.play();\r\n                        }\r\n                        timeline.stop();\r\n                        String answerText = answerList.get(quiz.getCorrectAnswer().charAt(0) - 'A').getText();\r\n                        if (button.getText().equals(answerText)) {\r\n                            AudioClip rightAnswer = new AudioClip(getClass().getResource(AUDIO_PATH + \"rightAnswer.mp3\").toString());\r\n                            if (checkVolume) {\r\n                                rightAnswer.play();\r\n                            }\r\n                            button.getStyleClass().add(\"correctAnswer\");\r\n                            score += DEFAULT_CORRECT_PENALTY;\r\n                            scoreLabel.setText(String.valueOf(score));\r\n                            if (score > highScore) {\r\n                                highScore = score;\r\n                                highScoreLabel.setText(String.valueOf(highScore));\r\n                                FileWriter fw = null;\r\n                                try {\r\n                                    fw = new FileWriter(DEFAULT_HIGH_SCORE_FILE_PATH);\r\n                                } catch (java.io.IOException e1) {\r\n                                    e1.printStackTrace();\r\n                                }\r\n                                assert fw != null;\r\n                                java.io.BufferedWriter bw = new java.io.BufferedWriter(fw);\r\n                                try {\r\n                                    bw.write(String.valueOf(highScore));\r\n                                } catch (java.io.IOException e2) {\r\n                                    e2.printStackTrace();\r\n                                }\r\n                                try {\r\n                                    bw.close();\r\n                                    fw.close();\r\n                                } catch (java.io.IOException e3) {\r\n                                    e3.printStackTrace();\r\n                                }\r\n                            }\r\n                            if (round == quizList.size()) {\r\n                                notice(true);\r\n                                round = 1;\r\n                                score = 0;\r\n                            } else {\r\n                                startButton.setVisible(true);\r\n                                startButton.setText(\"NEXT\");\r\n                            }\r\n                        } else {\r\n                            AudioClip wrongAnswer = new AudioClip(getClass().getResource(AUDIO_PATH + \"wrongAnswer.mp3\").toString());\r\n                            if (checkVolume) {\r\n                                wrongAnswer.play();\r\n                            }\r\n                            button.getStyleClass().add(\"wrongAnswer\");\r\n                            answerList.get(quiz.getCorrectAnswer().charAt(0) - 'A').getStyleClass().add(\"correctAnswer\");\r\n                            notice(false);\r\n                        }\r\n                        playing = false;\r\n                    }\r\n\r\n                });\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void notice(boolean isWon) {\r\n        if (isWon) {\r\n            AudioClip winAll = new AudioClip(getClass().getResource(AUDIO_PATH + \"winAll.mp3\").toString());\r\n            if (checkVolume) {\r\n                winAll.play();\r\n            }\r\n            winGame.setVisible(true);\r\n            musicGame.stop();\r\n            startButton.setText(\"RESTART\");\r\n        } else {\r\n            startButton.setText(\"RESTART\");\r\n            loseGame.setVisible(true);\r\n            AudioClip loseGame = new AudioClip(TextTwistGame.class.getResource(AUDIO_PATH + \"loseGame.mp3\").toString());\r\n            if (checkVolume) {\r\n                loseGame.play();\r\n            }\r\n            musicGame.stop();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void resume() {\r\n        timeline.play();\r\n    }\r\n\r\n    @Override\r\n    public void pause() {\r\n        timeline.pause();\r\n    }\r\n\r\n    public void setImage(String path) {\r\n        boxContainImage.getChildren().clear();\r\n        String imageType = \".jpg\";\r\n        if (getClass().getResource(path + imageType) == null) {\r\n            imageType = \".png\";\r\n        }\r\n        String imagePath = path + imageType;\r\n        Image image = new Image(getClass().getResource(imagePath).toString());\r\n        illustrations.setImage(image);\r\n        illustrations.setEffect(new DropShadow(20, Color.BLACK));\r\n        boxContainImage.getChildren().add(illustrations);\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        super.initialize(url, resourceBundle);\r\n        loseGame.setVisible(false);\r\n        winGame.setVisible(false);\r\n        Image image = new Image(getClass().getResource(IMAGE_PATH + \"music.png\").toString());\r\n        music = new ImageView(image);\r\n        music.setFitWidth(21);\r\n        music.setFitHeight(21);\r\n        btnmusic.setGraphic(music);\r\n        Image image2 = new Image(getClass().getResource(IMAGE_PATH + \"volumegame.png\").toString());\r\n        volume = new ImageView(image2);\r\n        volume.setFitWidth(23);\r\n        volume.setFitHeight(23);\r\n        btnvolume.setGraphic(volume);\r\n        credit.setVisible(false);\r\n        htp.setVisible(false);\r\n        menuGame.setVisible(false);\r\n        menuGame.setTranslateX(620);\r\n        left.setVisible(false);\r\n        left.setTranslateX(-99.5);\r\n        setImage(IMAGE_FUNNYQUIZGAME_PATH + \"rome\");\r\n        listButton.forEach(button -> button.addEventFilter(MouseEvent.MOUSE_CLICKED, event -> {\r\n            timeline.stop();\r\n        }));\r\n        // Read high score\r\n        FileReader fr = null;\r\n        try {\r\n            fr = new FileReader(DEFAULT_HIGH_SCORE_FILE_PATH);\r\n        } catch (java.io.FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        assert fr != null;\r\n        java.io.BufferedReader br = new java.io.BufferedReader(fr);\r\n        String line = null;\r\n        try {\r\n            line = br.readLine();\r\n        } catch (java.io.IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (line != null) {\r\n            highScore = Integer.parseInt(line);\r\n        }\r\n        init();\r\n        start();\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/application/learnlingo/Controller/FunnyQuizGame.java b/src/main/java/com/application/learnlingo/Controller/FunnyQuizGame.java
--- a/src/main/java/com/application/learnlingo/Controller/FunnyQuizGame.java	(revision 0a8a308300ec71d77c33866277c0bb5d12a8268d)
+++ b/src/main/java/com/application/learnlingo/Controller/FunnyQuizGame.java	(date 1700543015763)
@@ -349,7 +349,7 @@
                                     e3.printStackTrace();
                                 }
                             }
-                            if (round == quizList.size()) {
+                            if (round == 1) {
                                 notice(true);
                                 round = 1;
                                 score = 0;
Index: src/main/resources/com/application/learnlingo/database/wordOfTheDay.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>2023-11-20 last mile
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/application/learnlingo/database/wordOfTheDay.txt b/src/main/resources/com/application/learnlingo/database/wordOfTheDay.txt
--- a/src/main/resources/com/application/learnlingo/database/wordOfTheDay.txt	(revision 0a8a308300ec71d77c33866277c0bb5d12a8268d)
+++ b/src/main/resources/com/application/learnlingo/database/wordOfTheDay.txt	(date 1700543015769)
@@ -1,1 +1,1 @@
-2023-11-20 last mile
\ No newline at end of file
+2023-11-21 homeomorphissn
\ No newline at end of file
